# For Licence details look at https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg/-/blob/master/LICENSE.incore

add16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      add16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

radd16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      radd16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

uradd16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uradd16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kadd16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kadd16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukadd16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukadd16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

sub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      sub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

rsub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rsub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0


ursub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ursub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

ksub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ksub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

uksub16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      uksub16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

cras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      cras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

rcras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rcras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

urcras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urcras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kcras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kcras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukcras16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukcras16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

crsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      crsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

rcrsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rcrsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

urcrsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urcrsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kcrsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kcrsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukcrsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukcrsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

stas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      stas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

rstas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rstas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

urstas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urstas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kstas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kstas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukstas16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukstas16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

stsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      stsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

rstsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      rstsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

urstsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      urstsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

kstsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kstsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukstsa16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ukstsa16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

add8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      add8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

radd8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      radd8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

uradd8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      uradd8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

kadd8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      kadd8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

ukadd8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ukadd8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

sub8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sub8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

rsub8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      rsub8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

ursub8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ursub8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

ksub8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ksub8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

uksub8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      uksub8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

sra16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sra16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

srai16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srai16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_imm_val("imm_val", 4)': 0

sra16.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sra16.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

srai16.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srai16.u: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_imm_val("imm_val", 4)': 0

srl16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srl16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

srli16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srli16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_imm_val("imm_val", 4)': 0

srl16.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srl16.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

srli16.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srli16.u: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_imm_val("imm_val", 4)': 0

sll16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sll16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

slli16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      slli16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_imm_val("imm_val", 4)': 0

ksll16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ksll16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), False)': 0
        'alternate("rs2_val", ceil(log(16, 2)), False)': 0

kslli16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      kslli16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_imm_val("imm_val", 4)': 0

kslra16:
    config: 
      - check isa:=regex(.*i.*p.*)
    opcode: 
      kslra16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), True)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), True)': 0
        'alternate("rs2_val", ceil(log(16, 2)), True)': 0

kslra16.u:
    config: 
      - check isa:=regex(.*i.*p.*)
    opcode: 
      kslra16.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(16, 2)), True)': 0
        'walking_zeros("rs2_val", ceil(log(16, 2)), True)': 0
        'alternate("rs2_val", ceil(log(16, 2)), True)': 0

sra8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sra8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

srai8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srai8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_imm_val("imm_val", 3)': 0

sra8.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sra8.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

srai8.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srai8.u: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_imm_val("imm_val", 3)': 0

srl8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srl8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

srli8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srli8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_imm_val("imm_val", 3)': 0

srl8.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srl8.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

srli8.u:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      srli8.u: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_imm_val("imm_val", 3)': 0

sll8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sll8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

slli8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      slli8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_imm_val("imm_val", 3)': 0

ksll8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ksll8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), False)': 0
        'alternate("rs2_val", ceil(log(8, 2)), False)': 0

kslli8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      kslli8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_imm_val("imm_val", 3)': 0

kslra8:
    config: 
      - check isa:=regex(.*i.*p.*)
    opcode: 
      kslra8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), True)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), True)': 0
        'alternate("rs2_val", ceil(log(8, 2)), True)': 0

kslra8.u:
    config: 
      - check isa:=regex(.*i.*p.*)
    opcode: 
      kslra8.u: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(8, 2)), True)': 0
        'walking_zeros("rs2_val", ceil(log(8, 2)), True)': 0
        'alternate("rs2_val", ceil(log(8, 2)), True)': 0

cmpeq16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      cmpeq16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

scmplt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      scmplt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

scmple16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      scmple16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ucmplt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ucmplt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

ucmple16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      ucmple16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

cmpeq8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      cmpeq8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

scmplt8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      scmplt8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

scmple8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      scmple8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

ucmplt8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ucmplt8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

ucmple8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ucmple8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

smul16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smul16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smulx16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smulx16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

umul16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umul16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

umulx16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umulx16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

khm16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      khm16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmx16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      khmx16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smul8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smul8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

smulx8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smulx8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

umul8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umul8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

umulx8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umulx8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

khm8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      khm8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

khmx8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      khmx8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

smin16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smin16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

umin16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umin16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

smax16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smax16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

umax16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umax16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

sclip16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sclip16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_imm_val("imm_val", 4)': 0

uclip16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      uclip16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_imm_val("imm_val", 4)': 0

kabs16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      kabs16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0

clrs16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clrs16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0

clz16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clz16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0

clo16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clo16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0

swap16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      swap16: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0

smin8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smin8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

umin8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umin8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

smax8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smax8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

umax8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umax8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

kabs8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      kabs8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sclip8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sclip8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_imm_val("imm_val", 3)': 0

uclip8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      uclip8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_imm_val("imm_val", 3)': 0

clrs8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clrs8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

clz8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clz8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

clo8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clo8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

swap8:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      swap8: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

sunpkd810:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sunpkd810: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sunpkd820:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sunpkd820: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sunpkd830:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sunpkd830: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sunpkd831:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sunpkd831: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

sunpkd832:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sunpkd832: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0

zunpkd810:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      zunpkd810: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

zunpkd820:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      zunpkd820: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

zunpkd830:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      zunpkd830: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

zunpkd831:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      zunpkd831: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

zunpkd832:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      zunpkd832: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0

pkbb16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      pkbb16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

pkbt16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      pkbt16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

pktb16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      pktb16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

pktt16:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      pktt16: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=False)': 0
        'simd_base_val("rs2", xlen, 16, signed=False)': 0
        'simd_val_comb(xlen, 16, signed=False)': 0

# 2.3.4

smbb16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smbb16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smbt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smbt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smtt16:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smtt16: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmxda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmxda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0
smds:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smds: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smdrs:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smdrs: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

smxds:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      smxds: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmabb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmabb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmabt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmabt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmatt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmatt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmada:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmada: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmaxda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmaxda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmads:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmads: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmadrs:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmadrs: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmaxds:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmaxds: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmsda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmsda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kmsxda:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kmsxda: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

# 2.3.6 Miscellaneous Instructions

sclip32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      sclip32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_imm_val("imm_val", 5)': 0

uclip32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      uclip32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_imm_val("imm_val", 5)': 0

clrs32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clrs32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0

clz32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clz32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0

clo32:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      clo32: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0

pbsad:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      pbsad: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

pbsada:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      pbsada: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

smaqa:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smaqa: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

umaqa:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      umaqa: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=False)': 0
        'simd_base_val("rs2", xlen, 8, signed=False)': 0
        'simd_val_comb(xlen, 8, signed=False)': 0

smaqa.su:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      smaqa.su: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 8, signed=True)': 0
        'simd_base_val("rs2", xlen, 8, signed=True)': 0
        'simd_val_comb(xlen, 8, signed=True)': 0

# 2.5 Non-SIMD Instructions

kaddh:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      kaddh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ksubh:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ksubh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

khmbb:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      khmbb: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmbt:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      khmbt: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

khmtt:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      khmtt: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

ukaddh:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ukaddh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

uksubh:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      uksubh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kaddw:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      kaddw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ukaddw:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ukaddw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

ksubw:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ksubw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

uksubw:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      uksubw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=False)': 0
        'simd_base_val("rs2", xlen, 32, signed=False)': 0
        'simd_val_comb(xlen, 32, signed=False)': 0

kdmbb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmbb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmbt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmbt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmtt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmtt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kslraw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslraw: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

kslraw.u:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kslraw.u: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_base_val("rs2", xlen, 32, signed=True)': 0
        'simd_val_comb(xlen, 32, signed=True)': 0

ksllw:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      ksllw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'walking_ones("rs2_val", ceil(log(32, 2)), False)': 0
        'walking_zeros("rs2_val", ceil(log(32, 2)), False)': 0
        'alternate("rs2_val", ceil(log(32, 2)), False)': 0

kslliw:
    config: 
      - check ISA:=regex(.*I.*P.*)
    opcode: 
      kslliw: 0
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb: 
        'simd_base_val("rs1", xlen, 32, signed=True)': 0
        'simd_imm_val("imm_val", 5)': 0

kdmabb:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmbb: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmabt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmbt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kdmatt:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kdmtt: 0
    rs1:
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb:
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 16, signed=True)': 0
        'simd_base_val("rs2", xlen, 16, signed=True)': 0
        'simd_val_comb(xlen, 16, signed=True)': 0

kabsw:
    config:
      - check ISA:=regex(.*I.*P.*)
    opcode:
      kabsw: 0
    rs1:
      <<: *all_regs
    rd:
      <<: *all_regs
    val_comb:
      abstract_comb:
        'simd_base_val("rs1", xlen, 32, signed=True)': 0

