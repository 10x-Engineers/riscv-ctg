aes32dsi:
    config: 
      - check ISA:=regex(.*RV32.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      aes32dsi: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32,["rs1_val","rs2_val","imm_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val","imm_val"], [32, 32, 2])': 0

aes32dsmi:
    config: 
      - check ISA:=regex(.*RV32.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      aes32dsmi: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32,["rs1_val","rs2_val","imm_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val","imm_val"], [32, 32, 2])': 0

aes32esi:
    config: 
      - check ISA:=regex(.*RV32.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      aes32esi: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32,["rs1_val","rs2_val","imm_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val","imm_val"], [32, 32, 2])': 0

aes32esmi:
    config: 
      - check ISA:=regex(.*RV32.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      aes32esmi: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32,["rs1_val","rs2_val","imm_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val","imm_val"], [32, 32, 2])': 0

sm4ed:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
    opcode: 
      sm4ed: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32,["rs1_val","rs2_val","imm_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val","imm_val"], [32, 32, 2])': 0

sm4ks:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
    opcode: 
      sm4ks: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      abstract_comb:      
        'byte_count(32,["rs1_val","rs2_val","imm_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val","imm_val"], [32, 32, 2])': 0

sha512sig0h:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      sha512sig0h: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
sha512sig0l:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      sha512sig0l: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
sha512sig1h:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      sha512sig1h: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
sha512sig1l:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      sha512sig1l: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0

sha512sum0r:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      sha512sum0r: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
sha512sum1r:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*RV32.*I.*ZKn.*)
    opcode: 
      sha512sum1r: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0

ror:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      ror: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        
rol:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      rol: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        
rori:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      rori: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val", "imm_val"], [32,7])': 0
        'trailing_ones(32, ["rs1_val", "imm_val"], [32,7])': 0
        'leading_zeros(32, ["rs1_val", "imm_val"], [32,7])': 0
        'trailing_zeros(32, ["rs1_val", "imm_val"], [32,7])': 0
        
clmul:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      clmul: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        
clmulh:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      clmulh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0

andn:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      andn: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0

orn:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      orn: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0

xnor:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      xnor: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0

pack:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      pack: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0

packu:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      packu: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        
packh:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      packh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0

xperm.n:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      xperm.n: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        
xperm.b:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*ZKs.*)
      - check ISA:=regex(.*I.*ZKn.*)
    opcode: 
      xperm.b: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_ones(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'leading_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        'trailing_zeros(32, ["rs1_val","rs2_val"],[xlen,xlen])': 0
        
