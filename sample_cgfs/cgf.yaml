# For Licence details look at https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg/-/blob/master/LICENSE.incore

datasets: 
  all_regs: &all_regs
    x0: 0
    x1: 0
    x2: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x30: 0
    x31: 0

  c_regs: &c_regs
    x8: 0
    x9: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0

  all_regs_mx0: &all_regs_mx0
    x1: 0
    x2: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x30: 0
    x31: 0

  cbfmt_immval_sgn: &cbfmt_immval_sgn
    'imm_val == (-2**(6-1))': 0
    'imm_val == 0': 0
    'imm_val == (2**(6-1)-1)': 0
    'imm_val == 1': 0
 
  cfmt_immval_sgn_m0: &cfmt_immval_sgn_m0
    'imm_val == (-2**(6-1))': 0
    'imm_val == (2**(6-1)-1)': 0
    'imm_val == 1': 0

  rfmt_op_comb: &rfmt_op_comb
    'rs1 == rs2 != rd': 0
    'rs1 == rd != rs2': 0
    'rs2 == rd != rs1': 0
    'rs1 == rs2 == rd': 0
    'rs1 != rs2  and rs1 != rd and rs2 != rd': 0

  ifmt_op_comb: &ifmt_op_comb
    'rs1 == rd': 0
    'rs1 != rd': 0

  sfmt_op_comb: &sfmt_op_comb
    'rs1 == rs2': 0
    'rs1 != rs2': 0
  
  base_rs1val_sgn: &base_rs1val_sgn
    'rs1_val == (-2**(xlen-1))': 0
    'rs1_val == 0': 0
    'rs1_val == (2**(xlen-1)-1)': 0
    'rs1_val == 1': 0
  
  base_rs2val_sgn: &base_rs2val_sgn
    'rs2_val == (-2**(xlen-1))': 0
    'rs2_val == 0': 0
    'rs2_val == (2**(xlen-1)-1)': 0
    'rs2_val == 1': 0
  
  base_rs1val_unsgn: &base_rs1val_unsgn
    'rs1_val == 0': 0
    'rs1_val == (2**(xlen)-1)': 0
    'rs1_val == 1': 0
  
  base_rs2val_unsgn: &base_rs2val_unsgn
    'rs2_val == 0': 0
    'rs2_val == (2**(xlen)-1)': 0
    'rs2_val == 1': 0

  rfmt_val_comb_sgn: &rfmt_val_comb_sgn
    'rs1_val > 0 and rs2_val > 0': 0
    'rs1_val > 0 and rs2_val < 0': 0
    'rs1_val < 0 and rs2_val < 0': 0
    'rs1_val < 0 and rs2_val > 0': 0
    'rs1_val == rs2_val': 0
    'rs1_val != rs2_val': 0
  
  rfmt_val_comb_unsgn: &rfmt_val_comb_unsgn
    'rs1_val > 0 and rs2_val > 0': 0
    'rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0': 0
    'rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0': 0

  ifmt_val_comb_sgn: &ifmt_val_comb_sgn
    'rs1_val == imm_val': 0
    'rs1_val != imm_val': 0
    'rs1_val > 0 and imm_val > 0': 0
    'rs1_val > 0 and imm_val < 0': 0
    'rs1_val < 0 and imm_val > 0': 0
    'rs1_val < 0 and imm_val < 0': 0
  
  ifmt_val_comb_unsgn: &ifmt_val_comb_unsgn
    'rs1_val == imm_val and rs1_val > 0 and imm_val > 0': 0
    'rs1_val != imm_val and rs1_val > 0 and imm_val > 0': 0

  ifmt_base_immval_sgn: &ifmt_base_immval_sgn
    'imm_val == (-2**(12-1))': 0
    'imm_val == 0': 0
    'imm_val == (2**(12-1)-1)': 0
    'imm_val == 1': 0
  
  ifmt_base_immval_unsgn: &ifmt_base_immval_unsgn
    'imm_val == 0': 0
    'imm_val == (2**(12)-1)': 0
    'imm_val == 1': 0

  ifmt_base_shift: &ifmt_base_shift
    'rs1_val < 0 and imm_val > 0 and imm_val < xlen-1': 0
    'rs1_val > 0 and imm_val > 0 and imm_val < xlen-1': 0
    'rs1_val < 0 and imm_val == 0': 0
    'rs1_val > 0 and imm_val == 0': 0
    'rs1_val == imm_val and imm_val > 0 and imm_val < xlen-1': 0
    'rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen-1': 0
    'rs1_val == 0 and imm_val >= 0 and imm_val < xlen-1': 0
    'rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen-1': 0
    'rs1_val == 1 and imm_val >= 0 and imm_val < xlen-1': 0


  rfmt_base_shift: &rfmt_base_shift
    'rs1_val < 0 and rs2_val > 0 and rs2_val < xlen-1': 0
    'rs1_val > 0 and rs2_val > 0 and rs2_val < xlen-1': 0
    'rs1_val < 0 and rs2_val == 0': 0
    'rs1_val > 0 and rs2_val == 0': 0
    'rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen-1': 0
    'rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen-1': 0
    'rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen-1': 0
    'rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen-1': 0
    'rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen-1': 0

  bfmt_base_branch_val_align_sgn: &bfmt_base_branch_val_align_sgn
    'rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0': 0
    'rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0': 0
    'rs1_val < 0 and rs2_val < 0 and imm_val & 0x03 == 0': 0
    'rs1_val < 0 and rs2_val > 0 and imm_val & 0x03 == 0': 0
    'rs1_val == rs2_val and imm_val > 0 and imm_val & 0x03 == 0': 0
    'rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0': 0
    'rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0': 0
    'rs1_val > rs2_val and imm_val < 0 and imm_val & 0x03 == 0': 0
    'rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0': 0
    'rs1_val < rs2_val and imm_val < 0 and imm_val & 0x03 == 0': 0
  
  bfmt_base_branch_val_align_unsgn: &bfmt_base_branch_val_align_unsgn
    'rs1_val > 0 and rs2_val > 0': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val > 0': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val < 0': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val > 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val < 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val > 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val < 0 ': 0

  rs1val_walking: &rs1val_walking
    'walking_ones("rs1_val", xlen)': 0
    'walking_zeros("rs1_val", xlen)': 0
    'alternate("rs1_val",xlen)': 0

  rs2val_walking: &rs2val_walking
    'walking_ones("rs2_val", xlen)': 0
    'walking_zeros("rs2_val", xlen)': 0
    'alternate("rs2_val",xlen)': 0
  
  ifmt_immval_walking: &ifmt_immval_walking
    'walking_ones("imm_val", 12)': 0
    'walking_zeros("imm_val", 12)': 0
    'alternate("imm_val",12)': 0
  
  rs1val_walking_unsgn: &rs1val_walking_unsgn
    'walking_ones("rs1_val", xlen,False)': 0
    'walking_zeros("rs1_val", xlen,False)': 0
    'alternate("rs1_val",xlen,False)': 0
  
  rs2val_walking_unsgn: &rs2val_walking_unsgn
    'walking_ones("rs2_val", xlen,False)': 0
    'walking_zeros("rs2_val", xlen,False)': 0
    'alternate("rs2_val",xlen,False)': 0

  crfmt_val_comb_sgn: &crfmt_val_comb_sgn
    'rs2_val > 0': 0
    'rs2_val < 0': 0

  cbimm_val_walking: &cbimm_val_walking
    'walking_ones("imm_val", 6)': 0
    'walking_zeros("imm_val", 6)': 0
    'alternate("imm_val",6)': 0
  
  ifmt_immval_walking_unsgn: &ifmt_immval_walking_unsgn
    'walking_ones("imm_val", 12,False)': 0
    'walking_zeros("imm_val", 12,False)': 0
    'alternate("imm_val",12,False)': 0

csw:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.sw
    rs1: 
      <<: *c_regs
    rs2: 
      <<: *c_regs
    op_comb: 
        'rs1 != rs2': 0
    val_comb:
        'imm_val > 0': 0
        'imm_val == 0': 0
        <<: [  *base_rs2val_sgn]
        abstract_comb:
          <<: [*rs2val_walking]
          'walking_ones("imm_val",5,False, scale_func = lambda x: x*4)': 0
          'walking_zeros("imm_val",5,False, scale_func = lambda x: x*4)': 0
          'alternate("imm_val",5, False,scale_func = lambda x: x*4)': 0

clw:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.lw
    rs1: 
      <<: *c_regs
    rd: 
      <<: *c_regs
    op_comb:
        'rs1 == rd': 0
        'rs1 != rd': 0
    val_comb:
        'imm_val > 0': 0
        'imm_val == 0': 0
        abstract_comb:
          'walking_ones("imm_val",5,False, scale_func = lambda x: x*4)': 0
          'walking_zeros("imm_val",5,False, scale_func = lambda x: x*4)': 0
          'alternate("imm_val",5, False,scale_func = lambda x: x*4)': 0

clwsp:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.lwsp
    rd: 
      <<: *all_regs_mx0
    val_comb:
        'imm_val > 0': 0
        'imm_val == 0': 0
        abstract_comb:
          'walking_ones("imm_val",5,False, scale_func = lambda x: x*4)': 0
          'walking_zeros("imm_val",5,False, scale_func = lambda x: x*4)': 0
          'alternate("imm_val",5, False,scale_func = lambda x: x*4)': 0

cswsp:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.swsp
    rs2: 
      <<: *all_regs
    val_comb:
        'imm_val > 0': 0
        'imm_val == 0': 0
        <<: [  *base_rs2val_sgn]
        abstract_comb:
          <<: [*rs2val_walking]
          'walking_ones("imm_val",5,False, scale_func = lambda x: x*4)': 0
          'walking_zeros("imm_val",5,False, scale_func = lambda x: x*4)': 0
          'alternate("imm_val",5, False,scale_func = lambda x: x*4)': 0

clui:
  config: check ISA:=regex(.*I.*C.*) 
  opcode: c.lui
  rd:
    x1: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x30: 0
    x31: 0

  val_comb:
    'rs1_val > 0 and imm_val > 32': 0
    'rs1_val > 0 and imm_val < 32': 0
    'rs1_val < 0 and imm_val > 32': 0
    'rs1_val < 0 and imm_val < 32': 0
    abstract_comb:
      'walking_ones("imm_val", 6, False)': 0
      'walking_zeros("imm_val", 6, False)': 0
      'alternate("imm_val", 6, False)': 0

cli:
  config: check ISA:=regex(.*I.*C.*) 
  opcode: c.li
  rd:
    <<: *all_regs_mx0
  val_comb:
    <<: [*cbfmt_immval_sgn] 
    abstract_comb:
      'walking_ones("imm_val", 6)': 0
      'walking_zeros("imm_val", 6)': 0
      'alternate("imm_val", 6)': 0

cslli:
  config: check ISA:=regex(.*I.*C.*) 
  opcode: c.slli
  rd:
    <<: *all_regs_mx0
  val_comb:
      'rs1_val < 0': 0
      'rs1_val > 0': 0
      'rs1_val == imm_val and imm_val != 0 ': 0
      'rs1_val == (-2**(xlen-1)) and imm_val != 0': 0
      'rs1_val == 0 and imm_val != 0': 0
      'rs1_val == (2**(xlen-1)-1) and imm_val != 0': 0
      'rs1_val == 1 and imm_val != 0': 0
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("imm_val", 4, False)': 0
        'walking_zeros("imm_val", 4, False)': 0
        'alternate("imm_val", 4, False)': 0

csrli:
  config: check ISA:=regex(.*I.*C.*) 
  opcode: c.srli
  rs1:
    <<: *c_regs
  val_comb:
      'rs1_val < 0': 0
      'rs1_val > 0': 0
      'rs1_val == imm_val and imm_val != 0 ': 0
      'rs1_val == (-2**(xlen-1)) and imm_val != 0': 0
      'rs1_val == 0 and imm_val != 0': 0
      'rs1_val == (2**(xlen-1)-1) and imm_val != 0': 0
      'rs1_val == 1 and imm_val != 0': 0
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("imm_val", 4, False)': 0
        'walking_zeros("imm_val", 4, False)': 0
        'alternate("imm_val", 4, False)': 0

csrai:
  config: check ISA:=regex(.*I.*C.*) 
  opcode: c.srai
  rs1:
    <<: *c_regs
  val_comb:
      'rs1_val < 0': 0
      'rs1_val > 0': 0
      'rs1_val == imm_val and imm_val != 0 ': 0
      'rs1_val == (-2**(xlen-1)) and imm_val != 0': 0
      'rs1_val == 0 and imm_val != 0': 0
      'rs1_val == (2**(xlen-1)-1) and imm_val != 0': 0
      'rs1_val == 1 and imm_val != 0': 0
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("imm_val", 4, False)': 0
        'walking_zeros("imm_val", 4, False)': 0
        'alternate("imm_val", 4, False)': 0

caddi4spn:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.addi4spn
    rd:
      <<: *c_regs
    val_comb:
      'imm_val > 0' : 0
      'imm_val == 1020': 0
      abstract_comb:
        'walking_ones("imm_val", 10,False,lambda x: x%4 == 0)': 0
        'walking_zeros("imm_val", 10,False,lambda x: x%4 == 0)': 0
        'alternate("imm_val",10,False,lambda x: x%4 == 0)': 0

caddi16sp:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.addi16sp
    rd:
      x2: 0
    val_comb:
      <<: [*base_rs1val_sgn,*ifmt_val_comb_sgn]
      'imm_val == -512': 0
      'imm_val == 496': 0
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("imm_val", 10,True,lambda x: x%16 == 0)': 0
        'walking_zeros("imm_val", 10,True,lambda x: x%16 == 0)': 0
        'alternate("imm_val",10,True,lambda x: x%16 == 0)': 0

cadd:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.add
    rs1:
      <<: *all_regs_mx0
    rs2:
      <<: *all_regs_mx0
    op_comb:
      <<: *sfmt_op_comb
    val_comb:
      <<: [*crfmt_val_comb_sgn, *base_rs1val_sgn,*base_rs2val_sgn]
      abstract_comb:
        <<: [*rs1val_walking,*rs2val_walking]

cmv:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.mv
    rs1:
      <<: *all_regs_mx0
    rs2:
      <<: *all_regs_mx0
    op_comb:
      <<: *sfmt_op_comb
    val_comb:
      <<: [*base_rs2val_sgn]
      abstract_comb:
        <<: [*rs2val_walking]

cand:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.and
    rs1:
      <<: *c_regs
    rs2:
      <<: *c_regs
    op_comb:
      <<: *sfmt_op_comb
    val_comb:
      <<: [*crfmt_val_comb_sgn, *base_rs1val_sgn,*base_rs2val_sgn]
      abstract_comb:
        <<: [*rs1val_walking,*rs2val_walking] 

csub:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.sub
    rs1:
      <<: *c_regs
    rs2:
      <<: *c_regs
    op_comb:
      <<: *sfmt_op_comb
    val_comb:
      <<: [*crfmt_val_comb_sgn, *base_rs1val_sgn,*base_rs2val_sgn]
      abstract_comb:
        <<: [*rs1val_walking,*rs2val_walking] 

cxor:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.xor
    rs1:
      <<: *c_regs
    rs2:
      <<: *c_regs
    op_comb:
      <<: *sfmt_op_comb
    val_comb:
      <<: [*crfmt_val_comb_sgn, *base_rs1val_sgn,*base_rs2val_sgn]
      abstract_comb:
        <<: [*rs1val_walking,*rs2val_walking] 

cor:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.or
    rs1:
      <<: *c_regs
    rs2:
      <<: *c_regs
    op_comb:
      <<: *sfmt_op_comb
    val_comb:
      <<: [*crfmt_val_comb_sgn, *base_rs1val_sgn,*base_rs2val_sgn]
      abstract_comb:
        <<: [*rs1val_walking,*rs2val_walking] 

candi:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.andi
    rs1:
      <<: *c_regs
    val_comb:
      <<: [*base_rs1val_sgn,*cbfmt_immval_sgn,*ifmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *cbimm_val_walking]

caddi:
    config: check ISA:=regex(.*I.*C.*)
    opcode: c.addi
    rd:
      <<: *all_regs_mx0
    val_comb:
      <<: [*base_rs1val_sgn,*cbfmt_immval_sgn,*ifmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *cbimm_val_walking]

addi:
    config: check ISA:=regex(.*I.*)
    opcode: addi
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: [ *ifmt_val_comb_sgn, *base_rs1val_sgn, *ifmt_base_immval_sgn] 
      abstract_comb:
        <<: [*rs1val_walking, *ifmt_immval_walking]

slti:
    config: check ISA:=regex(.*I.*)
    opcode: slti
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: [*ifmt_val_comb_sgn , *base_rs1val_sgn , *ifmt_base_immval_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *ifmt_immval_walking]

sltiu:
    config: check ISA:=regex(.*I.*)
    opcode: sltiu
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: [*ifmt_val_comb_unsgn , *base_rs1val_unsgn , *ifmt_base_immval_unsgn]
      abstract_comb:
        <<: [*rs1val_walking_unsgn, *ifmt_immval_walking_unsgn]

andi:
    config: check ISA:=regex(.*I.*)
    opcode: andi
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: [*ifmt_val_comb_sgn , *base_rs1val_sgn , *ifmt_base_immval_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *ifmt_immval_walking]

ori:
    config: check ISA:=regex(.*I.*)
    opcode: ori
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: [*ifmt_val_comb_sgn , *base_rs1val_sgn , *ifmt_base_immval_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *ifmt_immval_walking]

xori:
    config: check ISA:=regex(.*I.*)
    opcode: xori
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: [*ifmt_val_comb_sgn , *base_rs1val_sgn , *ifmt_base_immval_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *ifmt_immval_walking]

slli:
    config: check ISA:=regex(.*I.*)
    opcode: slli
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: *ifmt_base_shift
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("imm_val", 5, False)': 0
        'walking_zeros("imm_val", 5, False)': 0
        'alternate("imm_val", 5, False)': 0

srai:
    config: check ISA:=regex(.*I.*)
    opcode: srai
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: *ifmt_base_shift
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("imm_val", 5, False)': 0
        'walking_zeros("imm_val", 5, False)': 0
        'alternate("imm_val", 5, False)': 0

srli:
    config: check ISA:=regex(.*I.*)
    opcode: srli
    rs1: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      <<: *ifmt_base_shift
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("imm_val", 5, False)': 0
        'walking_zeros("imm_val", 5, False)': 0
        'alternate("imm_val", 5, False)': 0

add:
    config: check ISA:=regex(.*I.*)
    opcode: add
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

sub:
    config: check ISA:=regex(.*I.*)
    opcode: sub
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

slt:
    config: check ISA:=regex(.*I.*)
    opcode: slt
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

sltu:
    config: check ISA:=regex(.*I.*)
    opcode: sltu
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_unsgn , *base_rs2val_unsgn , *rfmt_val_comb_unsgn]
      abstract_comb:
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]

and:
    config: check ISA:=regex(.*I.*)
    opcode: and
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

or:
    config: check ISA:=regex(.*I.*)
    opcode: or
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

xor:
    config: check ISA:=regex(.*I.*)
    opcode: xor
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

sll:
    config: check ISA:=regex(.*I.*)
    opcode: sll
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: *rfmt_base_shift
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("rs2_val", 5, False)': 0
        'walking_zeros("rs2_val", 5, False)': 0
        'alternate("rs2_val", 5, False)': 0

srl:
    config: check ISA:=regex(.*I.*)
    opcode: srl
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: *rfmt_base_shift
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("rs2_val", 5, False)': 0
        'walking_zeros("rs2_val", 5, False)': 0
        'alternate("rs2_val", 5, False)': 0

sra:
    config: check ISA:=regex(.*I.*)
    opcode: sra
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: *rfmt_base_shift
      abstract_comb:
        <<: [*rs1val_walking]
        'walking_ones("rs2_val", 5, False)': 0
        'walking_zeros("rs2_val", 5, False)': 0
        'alternate("rs2_val", 5, False)': 0

lhu-align:
    config: check ISA:=regex(.*I.*)
    opcode: lhu
    rs1: 
      <<: *all_regs_mx0
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 3': 0
        'imm_val > 0': 0
        'imm_val < 0': 0
        'imm_val == 0': 0

lh-align:
    config: check ISA:=regex(.*I.*)
    opcode: lh
    rs1: 
      <<: *all_regs_mx0
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 3': 0
        'imm_val > 0': 0
        'imm_val < 0': 0
        'imm_val == 0': 0

lbu-align:
    config: check ISA:=regex(.*I.*)
    opcode: lbu
    rs1: 
      <<: *all_regs_mx0
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 3': 0
        'imm_val > 0': 0
        'imm_val < 0': 0
        'imm_val == 0': 0

lb-align:
    config: check ISA:=regex(.*I.*)
    opcode: lb
    rs1: 
      <<: *all_regs_mx0
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 3': 0
        'imm_val > 0': 0
        'imm_val < 0': 0
        'imm_val == 0': 0

lw-align:
    config: check ISA:=regex(.*I.*)
    opcode: lw
    rs1: 
      <<: *all_regs_mx0
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 3': 0
        'imm_val > 0': 0
        'imm_val < 0': 0
        'imm_val == 0': 0

beq:
    config: check ISA:=regex(.*I.*)
    opcode: beq
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      <<: *bfmt_base_branch_val_align_sgn
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

bge:
    config: check ISA:=regex(.*I.*)
    opcode: bge
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      <<: *bfmt_base_branch_val_align_sgn
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

bgeu:
    config: check ISA:=regex(.*I.*)
    opcode: bgeu
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      <<: *bfmt_base_branch_val_align_unsgn
      abstract_comb:
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]

blt:
    config: check ISA:=regex(.*I.*)
    opcode: blt
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      <<: *bfmt_base_branch_val_align_sgn
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

bltu:
    config: check ISA:=regex(.*I.*)
    opcode: bltu
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      <<: *bfmt_base_branch_val_align_unsgn
      abstract_comb:
        <<: [*rs1val_walking_unsgn, *rs2val_walking_unsgn]

bne:
    config: check ISA:=regex(.*I.*)
    opcode: bne
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    op_comb: 
      <<: *sfmt_op_comb
    val_comb:
      <<: *bfmt_base_branch_val_align_sgn
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

sh-align:
    config: check ISA:=regex(.*I.*)
    opcode: sh
    rs1: 
      <<: *all_regs_mx0
    rs2: 
      <<: *all_regs
    op_comb: 
        'rs1 != rs2': 0
    val_comb:
        <<: [  *base_rs2val_sgn]
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 3': 0
        'imm_val > 0': 0
        'imm_val < 0': 0
        'imm_val == 0': 0
        abstract_comb:
          <<: [*rs2val_walking]

sb-align:
    config: check ISA:=regex(.*I.*)
    opcode: sb
    rs1: 
      <<: *all_regs_mx0
    rs2: 
      <<: *all_regs
    op_comb: 
        'rs1 != rs2': 0
    val_comb:
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 2 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 1 and (imm_val % 4) == 3': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 3 and (imm_val % 4) == 3': 0
        'imm_val > 0': 0
        'imm_val < 0': 0
        'imm_val == 0': 0
        <<: [  *base_rs2val_sgn]
        abstract_comb:
          <<: [*rs2val_walking]

sw-align:
    config: check ISA:=regex(.*I.*)
    opcode: sw
    rs1: 
      <<: *all_regs_mx0
    rs2: 
      <<: *all_regs
    op_comb: 
        'rs1 != rs2': 0
    val_comb:
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 0': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 1': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 2': 0
        '(rs1_val + imm_val) % 4 == 0 and (imm_val % 4) == 3': 0
        'imm_val > 0': 0
        'imm_val < 0': 0
        'imm_val == 0': 0
        <<: [  *base_rs2val_sgn]
        abstract_comb:
          <<: [*rs2val_walking]

auipc:
    config: check ISA:=regex(.*I.*)
    opcode: auipc
    rd: 
      <<: *all_regs
    val_comb:
        'imm_val == 0': 0
        'imm_val > 0': 0
        'imm_val == ((2**20)-1)': 0

lui:
    config: check ISA:=regex(.*I.*)
    opcode: lui
    rd: 
      <<: *all_regs
    val_comb:
        'imm_val == 0': 0
        'imm_val > 0': 0
        'imm_val == ((2**20)-1)': 0

jal:
    config: check ISA:=regex(.*I.*)
    opcode: jal
    rd: 
      <<: *all_regs
    val_comb:
        'imm_val < 0' : 0
        'imm_val > 0': 0
        'imm_val == (-(2**(18)))': 0
        'imm_val == ((2**(18)))': 0

jalr:
    config: check ISA:=regex(.*I.*)
    opcode: jalr
    rs1:
      <<: *all_regs_mx0
    rd: 
      <<: *all_regs
    op_comb:
      <<: *ifmt_op_comb
    val_comb:
      'imm_val > 0': 0
      'imm_val < 0': 0
      abstract_comb:
        <<: *ifmt_immval_walking

mul:
    config: check ISA:=regex(.*I.*)
    opcode: mul
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

mulh:
    config: check ISA:=regex(.*I.*)
    opcode: mulh
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

mulhu:
    config: check ISA:=regex(.*I.*)
    opcode: mulhu
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

mulhsu:
    config: check ISA:=regex(.*I.*)
    opcode: mulhsu
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

div:
    config: check ISA:=regex(.*I.*)
    opcode: div
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

divu:
    config: check ISA:=regex(.*I.*)
    opcode: divu
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

rem:
    config: check ISA:=regex(.*I.*)
    opcode: rem
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

remu:
    config: check ISA:=regex(.*I.*)
    opcode: remu
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd: 
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      <<: [*base_rs1val_sgn , *base_rs2val_sgn , *rfmt_val_comb_sgn]
      abstract_comb:
        <<: [*rs1val_walking, *rs2val_walking]

