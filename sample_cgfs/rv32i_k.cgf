# For Licence details look at https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg/-/blob/master/LICENSE.incore

aes32dsi:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      aes32dsi: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32)': 0
        'uniform_random(20, 100, ["rs1","rs2","imm_val"], [32, 32, 1])': 0

aes32dsmi:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      aes32dsmi: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32)': 0
        'uniform_random(20, 100, ["rs1","rs2","imm_val"], [32, 32, 1])': 0

aes32esi:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      aes32esi: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32)': 0
        'uniform_random(20, 100, ["rs1","rs2","imm_val"], [32, 32, 1])': 0

aes32esmi:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      aes32esmi: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32)': 0
        'uniform_random(20, 100, ["rs1","rs2","imm_val"], [32, 32, 1])': 0

sm4ed:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sm4ed: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(32)': 0
        'uniform_random(20, 100, ["rs1","rs2","imm_val"], [32, 32, 1])': 0

sm4ks:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sm4ks: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'byte_count(32)': 0
        'uniform_random(20, 100, ["rs1","rs2","imm_val"], [32, 32, 1])': 0
        
sha256sig0:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha256sig0: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'uniform_random(20, 100, ["rs1"], [xlen])': 0

sha256sig1:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha256sig1: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'uniform_random(20, 100, ["rs1"], [xlen])': 0
        
sha256sum0:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha256sum0: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'uniform_random(20, 100, ["rs1"], [xlen])': 0
        
sha256sum1:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha256sum1: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'uniform_random(20, 100, ["rs1"], [xlen])': 0

sm3p0:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sm3p0: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'uniform_random(20, 100, ["rs1"], [xlen])': 0

sm3p1:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sm3p1: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'uniform_random(20, 100, ["rs1"], [xlen])': 0

sha512sig0h:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha512sig0h: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_ones("rs2", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'walking_zeros("rs2", xlen, False)': 0
        'uniform_random(20, 100, ["rs1","rs2"], [xlen, xlen])': 0
        
sha512sig0l:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha512sig0l: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_ones("rs2", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'walking_zeros("rs2", xlen, False)': 0
        'uniform_random(20, 100, ["rs1","rs2"], [xlen, xlen])': 0

sha512sig1h:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha512sig1h: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_ones("rs2", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'walking_zeros("rs2", xlen, False)': 0
        'uniform_random(20, 100, ["rs1","rs2"], [xlen, xlen])': 0
        
sha512sig1l:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha512sig1l: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_ones("rs2", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'walking_zeros("rs2", xlen, False)': 0
        'uniform_random(20, 100, ["rs1","rs2"], [xlen, xlen])': 0
        
sha512sum0r:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha512sum0r: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_ones("rs2", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'walking_zeros("rs2", xlen, False)': 0
        'uniform_random(20, 100, ["rs1","rs2"], [xlen, xlen])': 0
        
sha512sum1r:
    config: 
      - check ISA:=regex(.*I.*K.*)
    opcode: 
      sha512sum1r: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1", xlen, False)': 0
        'walking_ones("rs2", xlen, False)': 0
        'walking_zeros("rs1", xlen, False)': 0
        'walking_zeros("rs2", xlen, False)': 0
        'uniform_random(20, 100, ["rs1","rs2"], [xlen, xlen])': 0
        
