# See LICENSE.incore for details
metadata:
  all_regs: &all_regs "['x'+str(x) for x in range(0,32)]"
  all_regs_mx0: &all_regs_mx0 "['x'+str(x) for x in range(1,32)]"
  c_regs: &c_regs "['x'+str(x) for x in range(8,16)]"

add:
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val + rs2_val) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)
  

sub:
  xlen: [32,64]
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  isa: I
  operation: 'hex((rs1_val - rs2_val) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)


addw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: I
  operation: 'hex((rs1_val & 0xFFFFFFFF) + (rs2_val & 0xFFFFFFFF) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

subw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: I
  operation: 'hex((rs1_val & 0xFFFFFFFF) - (rs2_val & 0xFFFFFFFF) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

and:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val & rs2_val) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

or:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val | rs2_val) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

slt:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex(int(rs1_val < rs2_val) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

sltu:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex(int(rs1_val < rs2_val) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_usign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(xlen)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

xor:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val ^ rs2_val) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

sllw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: i
  operation: 'hex((rs1_val << (rs2_val%32)) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(5)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

srlw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: i
  operation: 'hex(((rs1_val & 0xffffffff) >> (rs2_val%32)) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(5)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

sraw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: i
  operation: 'hex(sra(rs1_val & 0xffffffff, (rs2_val%32)) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(5)'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

sll:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: i
  operation: 'hex((rs1_val << (rs2_val%32)) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(ceil(log(xlen,2)))'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

srl:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: i
  operation: 'hex(((rs1_val & 0xffffffff) >> (rs2_val%32)) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(ceil(log(xlen,2)))'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

sra:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: i
  operation: 'hex(sra(rs1_val & 0xffffffff, (rs2_val%32)) & (2**(xlen)-1))'
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(ceil(log(xlen,2)))'
  template: |-
    
    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

addi:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val + imm_val) & (2**(xlen)-1))'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  formattype: 'iformat'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

addiw:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: I
  operation: 'hex(((rs1_val & 0xFFFFFFFF) + (imm_val & 0xffffffff)) & (2**(xlen)-1))'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  formattype: 'iformat'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

slti:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex(int(rs1_val < imm_val) & (2**(xlen)-1))'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  formattype: 'iformat'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

sltiu:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex(int(rs1_val < imm_val) & (2**(xlen)-1))'
  rs1_val_data: 'gen_usign_dataset(xlen)'
  imm_val_data: 'gen_usign_dataset(12)'
  formattype: 'iformat'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

andi:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val & imm_val) & (2**(xlen)-1))'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  formattype: 'iformat'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

ori:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val | imm_val) & (2**(xlen)-1))'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  formattype: 'iformat'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

xori:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val ^ imm_val) & (2**(xlen)-1))'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  formattype: 'iformat'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

slli:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex((rs1_val << imm_val) & (2**(xlen)-1))'
  formattype: 'iformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_usign_dataset(ceil(log(xlen,2)))'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

srli:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex(((rs1_val & 0xFFFFFFFF) >> imm_val) & (2**(xlen)-1))'
  formattype: 'iformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_usign_dataset(ceil(log(xlen,2)))'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

srai:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex(sra(rs1_val & 0xFFFFFFFF, (imm_val%32)) & (2**(xlen)-1))'
  formattype: 'iformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_usign_dataset(ceil(log(xlen,2)))'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

slliw:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: I
  operation: 'hex((rs1_val << imm_val) & (2**(xlen)-1))'
  formattype: 'iformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_usign_dataset(5)'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

srliw:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: I
  operation: 'hex(((rs1_val & 0xFFFFFFFF) >> imm_val) & (2**(xlen)-1))'
  formattype: 'iformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_usign_dataset(5)'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

sraiw:
  rs1_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: I
  operation: 'hex(sra(rs1_val & 0xFFFFFFFF, (imm_val%32)) & (2**(xlen)-1))'
  formattype: 'iformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_usign_dataset(5)'
  template: |-
    
    # opcode: inst ; op1:rs1; dest:rd; op1val:rs1_val;  immval:imm_val
    TEST_IMM_OP( inst, rd, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

lui:
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex(imm_val << (xlen-20) &(2**(xlen)-1))'
  formattype: 'uformat'
  imm_val_data: 'gen_usign_dataset(20)'
  template: |-
    
    # opcode: inst ; dest:rd; immval:imm_val
    TEST_CASE(testreg, rd, correctval, swreg, offset, inst rd,imm_val)

auipc:
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  operation: 'hex(imm_val << (xlen-20) &(2**(xlen)-1))'
  formattype: 'uformat'
  imm_val_data: 'gen_usign_dataset(20)'
  template: |-

    # opcode: inst ; dest:rd; immval:imm_val
    TEST_AUIPC(inst, rd, correctval, imm_val, swreg, offset, testreg)

beq:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'bformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'list(filter(lambda x: x%2==0,gen_sign_dataset(12)))'
  template: |-

    # opcode: inst, op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val; immval:imm_val; align: ea_align
    TEST_BRANCH_OP(inst, testreg, rs1, rs2, rs1_val, rs2_val, imm_val, label, swreg, offset,ea_align)

bge:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'bformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'list(filter(lambda x: x%2==0,gen_sign_dataset(12)))'
  template: |-

    # opcode: inst, op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val; immval:imm_val; align: ea_align
    TEST_BRANCH_OP(inst, testreg, rs1, rs2, rs1_val, rs2_val, imm_val, label, swreg, offset,ea_align)

bgeu:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'bformat'
  rs1_val_data: 'gen_usign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(xlen)'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'list(filter(lambda x: x%2==0,gen_sign_dataset(12)))'
  template: |-

    # opcode: inst, op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val; immval:imm_val; align: ea_align
    TEST_BRANCH_OP(inst, testreg, rs1, rs2, rs1_val, rs2_val, imm_val, label, swreg, offset,ea_align)

blt:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'bformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'list(filter(lambda x: x%2==0,gen_sign_dataset(12)))'
  template: |-

    # opcode: inst, op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val; immval:imm_val; align: ea_align
    TEST_BRANCH_OP(inst, testreg, rs1, rs2, rs1_val, rs2_val, imm_val, label, swreg, offset,ea_align)

bltu:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'bformat'
  rs1_val_data: 'gen_usign_dataset(xlen)'
  rs2_val_data: 'gen_usign_dataset(xlen)'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'list(filter(lambda x: x%2==0,gen_sign_dataset(12)))'
  template: |-

    # opcode: inst, op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val; immval:imm_val; align: ea_align
    TEST_BRANCH_OP(inst, testreg, rs1, rs2, rs1_val, rs2_val, imm_val, label, swreg, offset,ea_align)

bne:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'bformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'list(filter(lambda x: x%2==0,gen_sign_dataset(12)))'
  template: |-

    # opcode: inst, op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val; immval:imm_val; align: ea_align
    TEST_BRANCH_OP(inst, testreg, rs1, rs2, rs1_val, rs2_val, imm_val, label, swreg, offset,ea_align)

sd:
  rs1_op_data: *all_regs_mx0
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: I
  formattype: 'sformat'
  ea_align_data: '[0,1,2,3,4,5,6,7]'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op2val:rs2_val; immval: imm_val; align:ea_align
    TEST_STORE(swreg,testreg,index,rs1,rs2,rs2_val,imm_val,offset,inst,ea_align)

sw:
  rs1_op_data: *all_regs_mx0
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'sformat'
  ea_align_data: '[0,1,2,3]'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op2val:rs2_val; immval: imm_val; align:ea_align
    TEST_STORE(swreg,testreg,index,rs1,rs2,rs2_val,imm_val,offset,inst,ea_align)

sh:
  rs1_op_data: *all_regs_mx0
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'sformat'
  ea_align_data: '[0,1,2,3]'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op2val:rs2_val; immval: imm_val; align:ea_align
    TEST_STORE(swreg,testreg,index,rs1,rs2,rs2_val,imm_val,offset,inst,ea_align)

sb:
  rs1_op_data: *all_regs_mx0
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'sformat'
  ea_align_data: '[0,1,2,3]'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op2val:rs2_val; immval: imm_val; align:ea_align
    TEST_STORE(swreg,testreg,index,rs1,rs2,rs2_val,imm_val,offset,inst,ea_align)

ld:
  rs1_op_data: *all_regs_mx0
  rd_op_data: *all_regs
  isa: I
  xlen: [64]
  formattype: 'iformat'
  ea_align_data: '[0,1,2,3,4,5,6,7]'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode:inst op1:rs1; dest:rd; immval:imm_val; align:ea_align
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,ea_align)

lwu:
  rs1_op_data: *all_regs_mx0
  rd_op_data: *all_regs
  isa: I
  xlen: [64]
  formattype: 'iformat'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode:inst op1:rs1; dest:rd; immval:imm_val; align:ea_align
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,ea_align)

lw:
  rs1_op_data: *all_regs_mx0 
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'iformat'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode:inst op1:rs1; dest:rd; immval:imm_val; align:ea_align
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,ea_align)

lhu:
  rs1_op_data: *all_regs_mx0
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'iformat'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode:inst op1:rs1; dest:rd; immval:imm_val; align:ea_align
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,ea_align)

lh:
  rs1_op_data: *all_regs_mx0
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'iformat'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode:inst op1:rs1; dest:rd; immval:imm_val; align:ea_align
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,ea_align)

lbu:
  rs1_op_data: *all_regs_mx0
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'iformat'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode:inst op1:rs1; dest:rd; immval:imm_val; align:ea_align
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,ea_align)

lb:
  rs1_op_data: *all_regs_mx0
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'iformat'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode:inst op1:rs1; dest:rd; immval:imm_val; align:ea_align
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,ea_align)

jal:
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'jformat'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'list(filter(lambda x: x%2==0,gen_sign_dataset(20)))'
  template: |-

    # opcode: jal; dest:rd; immval:imm_val; align: ea_align
    TEST_JAL_OP(testreg, rd, imm_val, label, swreg, offset,ea_align)

jalr:
  rs1_op_data: *all_regs_mx0
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: I
  formattype: 'iformat'
  ea_align_data: '[0,1,2,3]'
  imm_val_data: 'gen_sign_dataset(12)'
  template: |-

    # opcode: jalr; op1:rs1; dest:rd; immval:imm_val; align: ea_align 
    TEST_JALR_OP(testreg, rd, rs1, imm_val, swreg, offset,ea_align)

mul:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

mulh:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

mulhu:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

mulhsu:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

div:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

divu:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

rem:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

remu:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

mulw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

divw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

divuw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

remw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

remuw:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs
  rd_op_data: *all_regs
  xlen: [64]
  isa: IM
  formattype: 'rformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst ; op1:rs1; op2:rs2; dest:rd; op1val:rs1_val;  op2val:rs2_val
    TEST_RR_OP(inst, rd, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

c.mv:
  rs2_op_data: *all_regs_mx0
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IC
  formattype: 'cmvformat'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst; op2:rs2; dest:rd; op2val:rs2_val
    TEST_CMV_OP( inst, rd, rs2, correctval, rs2_val, swreg, offset, testreg)

c.add:
  rs1_op_data: *all_regs
  rs2_op_data: *all_regs_mx0
  xlen: [32,64]
  isa: IC
  formattype: 'crformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val
    TEST_CR_OP( inst, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

c.addw:
  rs1_op_data: *c_regs
  rs2_op_data: *c_regs
  xlen: [64]
  isa: IC
  formattype: 'crformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val
    TEST_CR_OP( inst, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

c.and:
  rs1_op_data: *c_regs
  rs2_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'crformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val
    TEST_CR_OP( inst, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

c.or:
  rs1_op_data: *c_regs
  rs2_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'crformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val
    TEST_CR_OP( inst, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

c.xor:
  rs1_op_data: *c_regs
  rs2_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'crformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val
    TEST_CR_OP( inst, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

c.sub:
  rs1_op_data: *c_regs
  rs2_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'crformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val
    TEST_CR_OP( inst, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

c.subw:
  rs1_op_data: *c_regs
  rs2_op_data: *c_regs
  xlen: [64]
  isa: IC
  formattype: 'crformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  template: |-

    # opcode: inst; op1:rs1; op2:rs2; op1val:rs1_val; op2val:rs2_val
    TEST_CR_OP( inst, rs1, rs2, correctval, rs1_val, rs2_val, swreg, offset, testreg)

c.andi:
  rs1_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'cbformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(6)'
  template: |-

    # opcode: inst; op1:rs1; immval:imm_val
    TEST_CI_OP( inst, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

c.nop:
  xlen: [32,64]
  isa: IC
  formattype: 'cjformat'
  imm_val_data: 'gen_sign_dataset(6)'
  template: |-
  
    #opcode:inst; immval:imm_val
    TEST_CNOP_OP(inst, testreg, imm_val, swreg, offset)

c.addi:
  rd_op_data: *all_regs_mx0
  xlen: [32,64]
  isa: IC
  formattype: 'ciformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(6)'
  template: |-

    #opcode:inst; op1:rd; dest:rd op1val:rs1_val; immval:imm_val
    TEST_CI_OP( inst, rd, correctval, rs1_val, imm_val, swreg, offset, testreg)

c.addiw:
  rd_op_data: *all_regs_mx0
  xlen: [64]
  isa: IC
  formattype: 'ciformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'gen_sign_dataset(6)'
  template: |-

    #opcode:inst; op1:rd; dest:rd op1val:rs1_val; immval:imm_val
    TEST_CI_OP( inst, rd, correctval, rs1_val, imm_val, swreg, offset, testreg)

c.addi16sp:
  rd_op_data: "['x2']"
  xlen: [32,64]
  isa: IC
  formattype: 'ciformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'list(filter( lambda x: x!=0 , [ 16*x for x in gen_sign_dataset(6)])) + [496]'
  template: |-

    #opcode:inst; op1:x2; dest:x2 op1val:rs1_val; immval:imm_val
    TEST_CI_OP( inst, x2, correctval, rs1_val, imm_val, swreg, offset, testreg)

c.addi4spn:
  rd_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'ciwformat'
  imm_val_data: 'list(filter( lambda x: x!=0 , [ 4*x for x in gen_usign_dataset(8)]))'
  template: |-

    #opcode:inst; dest:rd; immval:imm_val
    TEST_CADDI4SPN_OP( inst, rd, correctval, imm_val, swreg, offset, testreg)

c.slli:
  rd_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'ciformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'list(filter(lambda x: x!=0, gen_usign_dataset(ceil(log(xlen,2)))))'
  template: |-

    #opcode:inst; op1:rd; dest:rd op1val:rs1_val; immval:imm_val
    TEST_CI_OP( inst, rd, correctval, rs1_val, imm_val, swreg, offset, testreg)

c.srli:
  rs1_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'cbformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'list(filter(lambda x: x!=0, gen_usign_dataset(ceil(log(xlen,2)))))'
  template: |-

    #opcode:inst; op1:rs1; dest:rs1 op1val:rs1_val; immval:imm_val
    TEST_CI_OP( inst, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

c.srai:
  rs1_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'cbformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'list(filter(lambda x: x!=0, gen_usign_dataset(ceil(log(xlen,2)))))'
  template: |-

    #opcode:inst; op1:rs1; dest:rs1 op1val:rs1_val; immval:imm_val
    TEST_CI_OP( inst, rs1, correctval, rs1_val, imm_val, swreg, offset, testreg)

c.li:
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IC
  formattype: 'ciformat'
  imm_val_data: 'gen_sign_dataset(6)'
  template: |-

    #opcode:inst; dest:rd; immval:imm_val
    TEST_CASE(testreg, rd, correctval, swreg, offset, inst rd, imm_val;)

c.lui:
  rd_op_data: *all_regs
  xlen: [32,64]
  isa: IC
  formattype: 'ciformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'list(filter(lambda x: x!=0 ,gen_usign_dataset(6)))'
  template: |-

    #opcode:inst; op1:rd; dest:rd op1val:rs1_val; immval:imm_val
    TEST_CI_OP( inst, rd, correctval, rs1_val, imm_val, swreg, offset, testreg)

c.sw:
  rs1_op_data: *c_regs
  rs2_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'csformat'
  rs1_val_data: '[0]'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: '[x*4 for x in gen_usign_dataset(5)]'
  template: |-

    #opcode:inst; op1:rs1; op2:rs2; op2val:rs2_val; immval: imm_val
    TEST_STORE(swreg,testreg,index,rs1,rs2,rs2_val,imm_val,offset,inst,0)

c.sd:
  rs1_op_data: *c_regs
  rs2_op_data: *c_regs
  xlen: [64]
  isa: IC
  formattype: 'csformat'
  rs1_val_data: '[0]'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: '[x*8 for x in gen_usign_dataset(5)]'
  template: |-

    #opcode:inst; op1:rs1; op2:rs2; op2val:rs2_val; immval: imm_val
    TEST_STORE(swreg,testreg,index,rs1,rs2,rs2_val,imm_val,offset,inst,0)

c.ld:
  rs1_op_data: *c_regs
  rd_op_data: *c_regs 
  xlen: [64]
  isa: IC
  formattype: 'clformat'
  rs1_val_data: '[0]'
  imm_val_data: '[x*8 for x in gen_usign_dataset(5)]'
  template: |-

    #opcode: inst; op1:rs1; dest:rd; op1val:rs1_val; immval: imm_val
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,rs1_val)

c.lw:
  rs1_op_data: *c_regs
  rd_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'clformat'
  rs1_val_data: '[0]'
  imm_val_data: '[x*4 for x in gen_usign_dataset(5)]'
  template: |-

    #opcode: inst; op1:rs1; dest:rd; immval: imm_val
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,0)

c.lwsp:
  rd_op_data: *all_regs_mx0
  xlen: [32,64]
  isa: IC
  formattype: 'ciformat'
  imm_val_data: '[x*4 for x in gen_usign_dataset(6)]'
  template: |-

    #opcode: inst; op1:rs1; dest:rd; immval: imm_val
    TEST_LOAD(swreg,testreg,index,rs1,rd,imm_val,offset,inst,0)

c.ldsp:
  rd_op_data: *all_regs_mx0
  xlen: [64]
  isa: IC
  formattype: 'ciformat'
  imm_val_data: '[x*8 for x in gen_usign_dataset(6)]'
  template: |-

    #opcode: inst; op1:x2; dest:rd; immval: imm_val
    TEST_LOAD(swreg,testreg,index,x2,rd,imm_val,offset,inst,0)

c.swsp:
  rs2_op_data: *all_regs
  xlen: [32,64]
  isa: IC
  formattype: 'cssformat'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: '[x*4 for x in gen_usign_dataset(6)]'
  template: |-

    #opcode:inst; op1:x2; op2:rs2; op2val:rs2_val; immval:imm_val
    TEST_STORE(swreg,testreg,index,x2,rs2,rs2_val,imm_val,offset,inst,0)

c.sdsp:
  rs2_op_data: *all_regs
  xlen: [64]
  isa: IC
  formattype: 'cssformat'
  rs2_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: '[x*8 for x in gen_usign_dataset(6)]'
  template: |-

    #opcode:inst; op1:x2; op2:rs2; op2val:rs2_val; immval: imm_val
    TEST_STORE(swreg,testreg,index,x2,rs2,rs2_val,imm_val,offset,inst,0)

c.beqz:
  rs1_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'cbformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'list(filter(lambda x: (x >=4 and x<250) or (x<=-4 and x>=-250),[x*2 for x in gen_sign_dataset(8)]))'
  template: |-

    #opcode:inst; op1:rs1; op1val:rs1_val; immval:imm_val
    TEST_CBRANCH_OP(inst, testreg, rs1, rs1_val, imm_val, label, swreg, offset)

c.bnez:
  rs1_op_data: *c_regs
  xlen: [32,64]
  isa: IC
  formattype: 'cbformat'
  rs1_val_data: 'gen_sign_dataset(xlen)'
  imm_val_data: 'list(filter(lambda x: (x >=4 and x<250) if x>0 else (x<=-4 and x>=-250),[x*2 for x in gen_sign_dataset(8)]))'
  template: |-

    #opcode: inst; op1:rs1; op1val:rs1_val; immval: imm_val
    TEST_CBRANCH_OP(inst, testreg, rs1, rs1_val, imm_val, label, swreg, offset)

c.j:
  xlen: [32,64]
  isa: IC
  formattype: 'cjformat'
  imm_val_data: 'list(filter(lambda x: (x >=4 and x<2030) if x>0 else (x<=-4 and x> -2030 ),[x*2 for x in gen_sign_dataset(11)]))'
  template: |-

    #opcode:inst; immval: imm_val
    TEST_CJ_OP(inst, testreg, imm_val, label, swreg, offset)

c.jal:
  xlen: [32,64]
  isa: IC
  formattype: 'cbformat'
  imm_val_data: 'list(filter(lambda x: (x >=4 and x<2030) if x>0 else (x<=-4 and x> -2030 ),[x*2 for x in gen_sign_dataset(11)]))'
  template: |-

    #opcode:inst; immval:imm_val
    TEST_CJAL_OP(inst, testreg, imm_val, label, swreg, offset)

c.jr:
  rs1_op_data: *all_regs_mx0
  xlen: [32,64]
  isa: IC
  formattype: 'crformat'
  template: |-

    #opcode: c.jr; op1:rs1
    TEST_CJR_OP(testreg, rs1, swreg, offset)

c.jalr:
  rs1_op_data: *all_regs_mx0
  xlen: [32,64]
  isa: IC
  formattype: 'crformat'
  template: |-

    #opcode:c.jalr; op1:rs1
    TEST_CJALR_OP(testreg, rs1, swreg, offset)

